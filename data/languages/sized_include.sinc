# WARNING: This is a multiply-included header, see "sized.sinc".

# Constructors in "@ifdef ONCE" are defined only once.
# Constructors in "@ifndef ONCE" are defined three times, for b32, b16 and b8 variants,
# these run in a "with" block that validates the "op_size" field.

@ifndef ONCE
#static struct insn tabsi[] = {
#	{ 0x00000000, 0x0000003f, OP3B, N("st"), T(sz), T(datari), REG2, .fmask = F_FUCOLD },
@if defined(SUPPORT_FUCOLD)
:st^$(SZ_SUFFIX) "D"^[reg1 + offset], reg2 is op_format=0x00; reg2 & reg1; imm8 [ offset=imm8 * $(SZ_BYTES); ] {
@if SZ_BITS == "32"
  store32
@elif SZ_BITS == "16"
  store16
@elif SZ_BITS == "8"
  store8
@endif
    (reg1 + offset, reg2);
}
@endif
#	{ 0x00000000, 0x00000030, OP3B, OOPS, T(sz), REG1, REG2, IMM8, .fmask = F_FUCOLD },
#


@endif # !ONCE
@ifdef ONCE
@if defined(SUPPORT_FUC5P)
#	{ 0x00000000, 0x000000f0, OP2B, N("mov"), REG0, FIMM8S, .fmask = F_FUC5P },
:mov reg0, fimm8s is raw_opcode_hi=0x00 & reg0; fimm8s {
  reg0 = fimm8s;
}

#	{ 0x00000040, 0x000000f0, OP3B, N("mov"), REG0, FIMM16S, .fmask = F_FUC5P },
:mov reg0, fimm16s is raw_opcode_hi=0x4 & reg0; fimm16s {
  reg0 = fimm16s;
}

#	{ 0x00000080, 0x000000f0, OP4B, N("mov"), REG0, FIMM24S, .fmask = F_FUC5P },
:mov reg0, fimm24s is raw_opcode_hi=0x8 & reg0; fimm24s {
  reg0 = fimm24s;
}
@endif

@endif # ONCE
@ifndef ONCE
#
#	{ 0x00000010, 0x0000003f, OP3B, N("add"), T(sz), REG2, REG1, IMM8 },
:add^$(SZ_SUFFIX) reg2, reg1, imm8 is op_format=0x10; reg2 & reg1; imm8 {
  add(reg2:$(SZ_BYTES), reg1:$(SZ_BYTES), imm8);
}

#	{ 0x00000011, 0x0000003f, OP3B, N("adc"), T(sz), REG2, REG1, IMM8 },
:adc^$(SZ_SUFFIX) reg2, reg1, imm8 is op_format=0x11; reg2 & reg1; imm8 {
  adc(reg2:$(SZ_BYTES), reg1:$(SZ_BYTES), imm8);
}

#	{ 0x00000012, 0x0000003f, OP3B, N("sub"), T(sz), REG2, REG1, IMM8 },
:sub^$(SZ_SUFFIX) reg2, reg1, imm8 is op_format=0x12; reg2 & reg1; imm8 {
  sub(reg2:$(SZ_BYTES), reg1:$(SZ_BYTES), imm8);
}

#	{ 0x00000013, 0x0000003f, OP3B, N("sbb"), T(sz), REG2, REG1, IMM8 },
:sbb^$(SZ_SUFFIX) reg2, reg1, imm8 is op_format=0x13; reg2 & reg1; imm8 {
  todo_binop(reg2:$(SZ_BYTES), reg1:$(SZ_BYTES), imm8 :1);
  #sbb(reg2:$(SZ_BYTES), reg1:$(SZ_BYTES), imm8);
}

#	{ 0x00000014, 0x0000003f, OP3B, N("shl"), T(sz), REG2, REG1, IMM8 },
:shl^$(SZ_SUFFIX) reg2, reg1, imm8 is op_format=0x14; reg2 & reg1; imm8 {
  # TODO: fix mask
  shl32(reg2:$(SZ_BYTES), reg1:$(SZ_BYTES), imm8);
}

#	{ 0x00000015, 0x0000003f, OP3B, N("shr"), T(sz), REG2, REG1, IMM8 },
:shr^$(SZ_SUFFIX) reg2, reg1, imm8 is op_format=0x15; reg2 & reg1; imm8 {
  # TODO: fix mask
  shr32(reg2:$(SZ_BYTES), reg1:$(SZ_BYTES), imm8);
}

#	{ 0x00000017, 0x0000003f, OP3B, N("sar"), T(sz), REG2, REG1, IMM8 },
:sar^$(SZ_SUFFIX) reg2, reg1, imm8 is op_format=0x17; reg2 & reg1; imm8 {
  # TODO: fix mask
  sar32(reg2:$(SZ_BYTES), reg1:$(SZ_BYTES), imm8);
}

#	{ 0x00000018, 0x0000003f, OP3B, N("ld"), T(sz), REG2, T(datari) },
:ld^$(SZ_SUFFIX) reg2, "D"^[reg1 + offset] is op_format=0x18; reg2 & reg1; imm8 [ offset=imm8 * $(SZ_BYTES); ] {
@if SZ_BITS == "32"
  load32
@elif SZ_BITS == "16"
  load16
@elif SZ_BITS == "8"
  load8
@endif
    (reg2:$(SZ_BYTES), reg1 + offset);
}

#	{ 0x0000001c, 0x0000003f, OP3B, N("shlc"), T(sz), REG2, REG1, IMM8 },
:shlc^$(SZ_SUFFIX) reg2, reg1, imm8 is op_format=0x1c; reg2 & reg1; imm8 {
  todo_binop(reg2:$(SZ_BYTES), reg1:$(SZ_BYTES), imm8 :1);
}

#	{ 0x0000001d, 0x0000003f, OP3B, N("shrc"), T(sz), REG2, REG1, IMM8 },
:shrc^$(SZ_SUFFIX) reg2, reg1, imm8 is op_format=0x1d; reg2 & reg1; imm8 {
  todo_binop(reg2:$(SZ_BYTES), reg1:$(SZ_BYTES), imm8 :1);
}

#	{ 0x00000010, 0x00000030, OP3B, OOPS, T(sz), REG2, REG1 },
#
@if defined(SUPPORT_FUCOLD)
#	{ 0x00000020, 0x0000003f, OP4B, N("add"), T(sz), REG2, REG1, IMM16, .fmask = F_FUCOLD },
:add^$(SZ_SUFFIX) reg2, reg1, imm16 is op_format=0x20; reg2 & reg1; imm16 {
  add(reg2:$(SZ_BYTES), reg1:$(SZ_BYTES), imm16);
}

#	{ 0x00000021, 0x0000003f, OP4B, N("adc"), T(sz), REG2, REG1, IMM16, .fmask = F_FUCOLD },
:adc^$(SZ_SUFFIX) reg2, reg1, imm16 is op_format=0x21; reg2 & reg1; imm16 {
  adc(reg2:$(SZ_BYTES), reg1:$(SZ_BYTES), imm16);
}

#	{ 0x00000022, 0x0000003f, OP4B, N("sub"), T(sz), REG2, REG1, IMM16, .fmask = F_FUCOLD },
:sub^$(SZ_SUFFIX) reg2, reg1, imm16 is op_format=0x22; reg2 & reg1; imm16 {
  sub(reg2:$(SZ_BYTES), reg1:$(SZ_BYTES), imm16);
}

#	{ 0x00000023, 0x0000003f, OP4B, N("sbb"), T(sz), REG2, REG1, IMM16, .fmask = F_FUCOLD },
:sbb^$(SZ_SUFFIX) reg2, reg1, imm16 is op_format=0x23; reg2 & reg1; imm16 {
  todo_binop(reg2:$(SZ_BYTES), reg1:$(SZ_BYTES), imm16 :4);
}

#	{ 0x00000020, 0x00000030, OP4B, OOPS, T(sz), REG2, REG1, IMM16, .fmask = F_FUCOLD },
@endif
#
@if defined(SUPPORT_FUC5P)
#	{ 0x00000020, 0x0000003f, OP2B, N("st"), T(sz), DATAR, REG2, .fmask = F_FUC5P },
:st^$(SZ_SUFFIX) "D"^[reg1], reg2 is op_format=0x20; reg2 & reg1 {
@if SZ_BITS == "32"
  store32
@elif SZ_BITS == "16"
  store16
@elif SZ_BITS == "8"
  store8
@endif
    (reg1, reg2);
}

#	{ 0x00000021, 0x0000003f, OP2B, N("st"), T(sz), T(dataspr), REG1, .fmask = F_FUC5P },
#	{ 0x00000024, 0x0000003f, OP2B, N("cmpu"), T(sz), REG1, REG2, .fmask = F_FUC5P },
:cmpu^$(SZ_SUFFIX) reg1, reg2 is op_format=0x24; reg2 & reg1 {
  cmpu(reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x00000025, 0x0000003f, OP2B, N("cmps"), T(sz), REG1, REG2, .fmask = F_FUC5P },
:cmps^$(SZ_SUFFIX) reg1, reg2 is op_format=0x25; reg2 & reg1 {
  cmps(reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x00000026, 0x0000003f, OP2B, N("cmp"), T(sz), REG1, REG2, .fmask = F_FUC5P },
:cmp^$(SZ_SUFFIX) reg1, reg2 is op_format=0x26; reg2 & reg1 {
  cmp(reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x00000020, 0x00000030, OP2B, OOPS, T(sz), REG1, REG2, .fmask = F_FUC5P },
@endif
#
#
#	{ 0x00000130, 0x00000f3f, T(ol0), N("st"), T(sz), T(datasp), REG1 },
:st^$(SZ_SUFFIX) "D"^[sp + offset], reg1 is op_format=0x30; subopcode2=0x1 & reg1 & sp ; imm8 [ offset=imm8 * $(SZ_BYTES); ] {
@if SZ_BITS == "32"
  store32
@elif SZ_BITS == "16"
  store16
@elif SZ_BITS == "8"
  store8
@endif
    (sp + offset, reg1);
}

#	{ 0x00000430, 0x00000f3e, T(ol0), N("cmpu"), T(sz), REG1, T(i) },
:cmpu^$(SZ_SUFFIX) reg1, imm8 is op_format=0x30; subopcode2=0x4 & reg1 ; imm8 {
  cmpu(reg1:$(SZ_BYTES), imm8);
}
:cmpu^$(SZ_SUFFIX) reg1, imm16 is op_format=0x31; subopcode2=0x4 & reg1 ; imm16 {
  cmpu(reg1:$(SZ_BYTES), imm16);
}

#	{ 0x00000530, 0x00000f3e, T(ol0), N("cmps"), T(sz), REG1, T(is) },
:cmps^$(SZ_SUFFIX) reg1, imm8s is op_format=0x30; subopcode2=0x5 & reg1 ; imm8s {
  cmps(reg1:$(SZ_BYTES), imm8s);
}
:cmps^$(SZ_SUFFIX) reg1, imm16s is op_format=0x31; subopcode2=0x5 & reg1 ; imm16s {
  cmps(reg1:$(SZ_BYTES), imm16s);
}

#	{ 0x00000630, 0x00000f3e, T(ol0), N("cmp"), T(sz), REG1, T(is), .fmask = F_FUC3P },
:cmp^$(SZ_SUFFIX) reg1, imm8s is op_format=0x30; subopcode2=0x6 & reg1 ; imm8s {
  cmp(reg1:$(SZ_BYTES), imm8s);
}
:cmp^$(SZ_SUFFIX) reg1, imm16s is op_format=0x31; subopcode2=0x6 & reg1 ; imm16s {
  cmp(reg1:$(SZ_BYTES), imm16s);
}

#	{ 0x00000030, 0x0000003e, T(ol0), OOPS, T(sz), REG1, T(i) },
#
@if defined(SUPPORT_FUC5P)
#	{ 0x00000032, 0x0000003f, OP2B, N("mov"), T(sz), REG2, REG1, .fmask = F_FUC5P },
:mov^$(SZ_SUFFIX) reg2, reg1 is op_format=0x32; reg2 & reg1 {
  mov(reg2:$(SZ_BYTES), reg1:$(SZ_BYTES));
}

#
#	/* XXX not verified yet */
#	{ 0x00000033, 0x00000f3f, OP4B, N("bra"), T(sz), REG1, IMM8, N("e"), SFBTARG, .fmask = F_FUC5P },
:bra^$(SZ_SUFFIX) reg1, imm8, "e", rel8 is op_format=0x33; subopcode2=0x0 & reg1; imm8; rel8 {
  if ((reg1:$(SZ_BYTES)) == imm8) goto rel8;
}

#	{ 0x00000433, 0x00000f3f, OP4B, N("bra"), T(sz), REG1, IMM8, N("ne"), SFBTARG, .fmask = F_FUC5P },
:bra^$(SZ_SUFFIX) reg1, imm8, "ne", rel8 is op_format=0x33; subopcode2=0x4 & reg1; imm8; rel8 {
  if ((reg1:$(SZ_BYTES)) != imm8) goto rel8;
}

#	{ 0x00000933, 0x00000f3f, OP5B, N("bra"), T(sz), REG1, IMM8, N("e"), LFBTARG, .fmask = F_FUC5P },
:bra^$(SZ_SUFFIX) reg1, imm8, "e", rel16 is op_format=0x33; subopcode2=0x9 & reg1; imm8; rel16 {
 if ((reg1:$(SZ_BYTES)) == imm8) goto rel16;
}

#	{ 0x00000a33, 0x00000f3f, OP5B, N("bra"), T(sz), REG1, IMM16, N("e"), SFFBTARG, .fmask = F_FUC5P },
:bra^$(SZ_SUFFIX) reg1, imm16, "e", rel8 is op_format=0x33; subopcode2=0xA & reg1; imm16; rel8 {
  if ((reg1:$(SZ_BYTES)) == imm16) goto rel8;
}

#	{ 0x00000b33, 0x00000f3f, OP6B, N("bra"), T(sz), REG1, IMM16, N("e"), LFFBTARG, .fmask = F_FUC5P },
:bra^$(SZ_SUFFIX) reg1, imm16, "e", rel16 is op_format=0x33; subopcode2=0xB & reg1; imm16; rel16 {
  if ((reg1:$(SZ_BYTES)) == imm16) goto rel16;
}

#	{ 0x00000d33, 0x00000f3f, OP5B, N("bra"), T(sz), REG1, IMM8, N("ne"), LFBTARG, .fmask = F_FUC5P },
:bra^$(SZ_SUFFIX) reg1, imm8, "ne", rel16 is op_format=0x33; subopcode2=0xD & reg1; imm8; rel16 {
 if ((reg1:$(SZ_BYTES)) != imm8) goto rel16;
}

#	{ 0x00000e33, 0x00000f3f, OP5B, N("bra"), T(sz), REG1, IMM16, N("ne"), SFFBTARG, .fmask = F_FUC5P },
:bra^$(SZ_SUFFIX) reg1, imm16, "ne", rel8 is op_format=0x33; subopcode2=0xE & reg1; imm16; rel8 {
  if ((reg1:$(SZ_BYTES)) != imm16) goto rel8;
}

#	{ 0x00000f33, 0x00000f3f, OP6B, N("bra"), T(sz), REG1, IMM16, N("ne"), LFFBTARG, .fmask = F_FUC5P },
:bra^$(SZ_SUFFIX) reg1, imm16, "ne", rel16 is op_format=0x33; subopcode2=0xf & reg1; imm16; rel16 {
  if ((reg1:$(SZ_BYTES)) != imm16) goto rel16;
}
@endif
#
#	{ 0x00000034, 0x00000f3f, OP3B, N("ld"), T(sz), REG1, T(datasp) },
:ld^$(SZ_SUFFIX) reg1, "D"^[sp + offset] is op_format=0x34; subopcode2=0x0 & reg1 & sp ; imm8 [ offset=imm8 * $(SZ_BYTES); ] {
@if SZ_BITS == "32"
  load32
@elif SZ_BITS == "16"
  load16
@elif SZ_BITS == "8"
  load8
@endif
    (reg1:$(SZ_BYTES), sp + offset);
}

#	{ 0x00000034, 0x0000003f, OP3B, OOPS, T(sz), REG1, IMM8 },
#

@if defined(SUPPORT_FUC5P)
#	{ 0x00000035, 0x0000003f, OP3B, N("st"), T(sz), T(datari), REG2, .fmask = F_FUC5P },
:st^$(SZ_SUFFIX) "D"^[reg1 + offset], reg2 is op_format=0x35; reg2 & reg1; imm8 [ offset=imm8 * $(SZ_BYTES); ] {
@if SZ_BITS == "32"
  store32
@elif SZ_BITS == "16"
  store16
@elif SZ_BITS == "8"
  store8
@endif
    (reg1 + offset, reg2);
}
@endif

#
#	{ 0x00000036, 0x00000f3e, T(ol0), N("add"), T(sz), REG1, T(i) },
:add^$(SZ_SUFFIX) reg1, imm8 is op_format=0x36; subopcode2=0x0 & reg1; imm8 {
  add(reg1:$(SZ_BYTES), reg1:$(SZ_BYTES), imm8);
}
:add^$(SZ_SUFFIX) reg1, imm16 is op_format=0x37; subopcode2=0x0 & reg1; imm16 {
  add(reg1:$(SZ_BYTES), reg1:$(SZ_BYTES), imm16);
}

#	{ 0x00000136, 0x00000f3e, T(ol0), N("adc"), T(sz), REG1, T(i) },
:adc^$(SZ_SUFFIX) reg1, imm8 is op_format=0x36; subopcode2=0x1 & reg1; imm8 {
  adc(reg1:$(SZ_BYTES), reg1:$(SZ_BYTES), imm8);
}

#	{ 0x00000236, 0x00000f3e, T(ol0), N("sub"), T(sz), REG1, T(i) },
:sub^$(SZ_SUFFIX) reg1, imm8 is op_format=0x36; subopcode2=0x2 & reg1; imm8 {
  sub(reg1:$(SZ_BYTES), reg1:$(SZ_BYTES), imm8);
}
:sub^$(SZ_SUFFIX) reg1, imm16 is op_format=0x37; subopcode2=0x2 & reg1; imm16 {
  sub(reg1:$(SZ_BYTES), reg1:$(SZ_BYTES), imm16);
}

#	{ 0x00000336, 0x00000f3e, T(ol0), N("sbb"), T(sz), REG1, T(i) },
:sbb^$(SZ_SUFFIX) reg1, imm8 is op_format=0x36; subopcode2=0x3 & reg1; imm8 {
  todo_binop(reg1:$(SZ_BYTES), reg1:$(SZ_BYTES), imm8 :1);
}

#	{ 0x00000436, 0x00000f3f, T(ol0), N("shl"), T(sz), REG1, T(i) },
:shl^$(SZ_SUFFIX) reg1, imm8 is op_format=0x36; subopcode2=0x4 & reg1; imm8 {
  # TODO: fix mask
  shl32(reg1:$(SZ_BYTES), reg1:$(SZ_BYTES), imm8);
}

#	{ 0x00000536, 0x00000f3f, T(ol0), N("shr"), T(sz), REG1, T(i) },
:shr^$(SZ_SUFFIX) reg1, imm8 is op_format=0x36; subopcode2=0x5 & reg1; imm8 {
  # TODO: fix mask
  shr32(reg1:$(SZ_BYTES), reg1:$(SZ_BYTES), imm8);
}

#	{ 0x00000736, 0x00000f3f, T(ol0), N("sar"), T(sz), REG1, T(i) },
:sar^$(SZ_SUFFIX) reg1, imm8 is op_format=0x36; subopcode2=0x7 & reg1; imm8 {
  # TODO: fix mask
  sar32(reg1:$(SZ_BYTES), reg1:$(SZ_BYTES), imm8);
}

#	{ 0x00000c36, 0x00000f3f, T(ol0), N("shlc"), T(sz), REG1, T(i) },
:shlc^$(SZ_SUFFIX) reg1, imm8 is op_format=0x36; subopcode2=0xc & reg1; imm8 {
  todo_binop(reg1:$(SZ_BYTES), reg1:$(SZ_BYTES), imm8 :1);
}

#	{ 0x00000d36, 0x00000f3f, T(ol0), N("shrc"), T(sz), REG1, T(i) },
:shrc^$(SZ_SUFFIX) reg1, imm8 is op_format=0x36; subopcode2=0xd & reg1; imm8 {
  todo_binop(reg1:$(SZ_BYTES), reg1:$(SZ_BYTES), imm8 :1);
}

#	{ 0x00000036, 0x0000003e, T(ol0), OOPS, T(sz), REG1, T(i) },
#
@if defined(SUPPORT_FUCOLD)
#	{ 0x00000038, 0x000f003f, OP3B, N("st"), T(sz), DATAR, REG2, .fmask = F_FUCOLD },
:st^$(SZ_SUFFIX) "D"^[reg1], reg2 is op_format=0x38; reg2 & reg1; subopcode3=0x0 {
@if SZ_BITS == "32"
  store32
@elif SZ_BITS == "16"
  store16
@elif SZ_BITS == "8"
  store8
@endif
    (reg1, reg2);
}


#	{ 0x00010038, 0x000f003f, OP3B, N("st"), T(sz), T(dataspr), REG1, .fmask = F_FUCOLD },
#	{ 0x00040038, 0x000f003f, OP3B, N("cmpu"), T(sz), REG1, REG2, .fmask = F_FUCOLD },
:cmpu^$(SZ_SUFFIX) reg1, reg2 is op_format=0x38; reg2 & reg1; subopcode3=0x4 {
  cmpu(reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x00050038, 0x000f003f, OP3B, N("cmps"), T(sz), REG1, REG2, .fmask = F_FUCOLD },
:cmps^$(SZ_SUFFIX) reg1, reg2 is op_format=0x38; reg2 & reg1; subopcode3=0x5 {
  cmps(reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x00060038, 0x000f003f, OP3B, N("cmp"), T(sz), REG1, REG2, .fmask = F_FUC3P | F_FUCOLD },
:cmp^$(SZ_SUFFIX) reg1, reg2 is op_format=0x38; reg2 & reg1; subopcode3=0x6 {
  cmp(reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x00000038, 0x0000003f, OP3B, OOPS, T(sz), REG1, REG2, .fmask = F_FUCOLD },
@endif
#

@if defined(SUPPORT_FUC5P)
#	{ 0x0000000038, 0x0f0000003f, OP5B, N("add"), T(sz), REG2, REG1, IMM16, .fmask = F_FUC5P },
:add^$(SZ_SUFFIX) reg2, reg1, imm16 is op_format=0x38; reg2 & reg1; imm16 ; subopcode5=0x0 {
  add(reg2:$(SZ_BYTES), reg1:$(SZ_BYTES), imm16);
}

#	{ 0x0100000038, 0x0f0000003f, OP5B, N("adc"), T(sz), REG2, REG1, IMM16, .fmask = F_FUC5P },
:adc^$(SZ_SUFFIX) reg2, reg1, imm16 is op_format=0x38; reg2 & reg1; imm16 ; subopcode5=0x1 {
  adc(reg2:$(SZ_BYTES), reg1:$(SZ_BYTES), imm16);
}

#	{ 0x0200000038, 0x0f0000003f, OP5B, N("sub"), T(sz), REG2, REG1, IMM16, .fmask = F_FUC5P },
:sub^$(SZ_SUFFIX) reg2, reg1, imm16 is op_format=0x38; reg2 & reg1; imm16 ; subopcode5=0x2 {
  sub(reg2:$(SZ_BYTES), reg1:$(SZ_BYTES), imm16);
}

#	{ 0x0300000038, 0x0f0000003f, OP5B, N("sbb"), T(sz), REG2, REG1, IMM16, .fmask = F_FUC5P },
:sbb^$(SZ_SUFFIX) reg2, reg1, imm16 is op_format=0x38; reg2 & reg1; imm16 ; subopcode5=0x3 {
  todo_binop(reg2:$(SZ_BYTES), reg1:$(SZ_BYTES), imm16 :4);
}

#	{ 0x00000038, 0x0000003f, OP5B, OOPS, T(sz), REG2, REG1, IMM16, .fmask = F_FUC5P },
@endif
#
#	{ 0x00000039, 0x000f003f, OP3B, N("not"), T(sz), REG2, REG1 },
:not^$(SZ_SUFFIX) reg1, reg2 is op_format=0x39; reg2 & reg1; subopcode3=0x0 {
  not(reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x00010039, 0x000f003f, OP3B, N("neg"), T(sz), REG2, REG1 },
:neg^$(SZ_SUFFIX) reg1, reg2 is op_format=0x39; reg2 & reg1; subopcode3=0x1 {
  neg(reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x00020039, 0x000f003f, OP3B, N("movf"), T(sz), REG2, REG1, .fmask = F_FUC0 },

@if defined(SUPPORT_FUCOLD)
#	{ 0x00020039, 0x000f003f, OP3B, N("mov"), T(sz), REG2, REG1, .fmask = F_FUC3P | F_FUCOLD },
:mov^$(SZ_SUFFIX) reg1, reg2 is op_format=0x39; reg2 & reg1; subopcode3=0x2 {
  mov(reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}
@endif

#	{ 0x00030039, 0x000f003f, OP3B, N("hswap"), T(sz), REG2, REG1 },
#	{ 0x00000039, 0x0000003f, OP3B, OOPS, T(sz), REG2, REG1 },
#
#	{ 0x0000003a, 0x000f003f, OP3B, N("ld"), T(sz), REG1, T(dataspr) },
#	{ 0x0000003a, 0x0000003f, OP3B, OOPS, T(sz), REG1, REG2 },
#
#	{ 0x0000003b, 0x000f003f, OP3B, N("add"), T(sz), REG1, REG2 },
:add^$(SZ_SUFFIX) reg1, reg2 is op_format=0x3b; reg2 & reg1; subopcode3=0x0 {
  add(reg1:$(SZ_BYTES), reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x0001003b, 0x000f003f, OP3B, N("adc"), T(sz), REG1, REG2 },
:adc^$(SZ_SUFFIX) reg1, reg2 is op_format=0x3b; reg2 & reg1; subopcode3=0x1 {
  adc(reg1:$(SZ_BYTES), reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x0002003b, 0x000f003f, OP3B, N("sub"), T(sz), REG1, REG2 },
:sub^$(SZ_SUFFIX) reg1, reg2 is op_format=0x3b; reg2 & reg1; subopcode3=0x2 {
  sub(reg1:$(SZ_BYTES), reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x0003003b, 0x000f003f, OP3B, N("sbb"), T(sz), REG1, REG2 },
:sbb^$(SZ_SUFFIX) reg1, reg2 is op_format=0x3b; reg2 & reg1; subopcode3=0x3 {
  todo_binop(reg1:$(SZ_BYTES), reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x0004003b, 0x000f003f, OP3B, N("shl"), T(sz), REG1, REG2 },
:shl^$(SZ_SUFFIX) reg1, reg2 is op_format=0x3b; reg2 & reg1; subopcode3=0x4 {
  # TODO: fix mask
  shl32(reg1:$(SZ_BYTES), reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x0005003b, 0x000f003f, OP3B, N("shr"), T(sz), REG1, REG2 },
:shr^$(SZ_SUFFIX) reg1, reg2 is op_format=0x3b; reg2 & reg1; subopcode3=0x5 {
  # TODO: fix mask
  shr32(reg1:$(SZ_BYTES), reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x0007003b, 0x000f003f, OP3B, N("sar"), T(sz), REG1, REG2 },
:sar^$(SZ_SUFFIX) reg1, reg2 is op_format=0x3b; reg2 & reg1; subopcode3=0x7 {
  # TODO: fix mask
  sar32(reg1:$(SZ_BYTES), reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}


#	{ 0x000c003b, 0x000f003f, OP3B, N("shlc"), T(sz), REG1, REG2 },
:shlc^$(SZ_SUFFIX) reg1, reg2 is op_format=0x3b; reg2 & reg1; subopcode3=0xc {
  todo_binop(reg1:$(SZ_BYTES), reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x000d003b, 0x000f003f, OP3B, N("shrc"), T(sz), REG1, REG2 },
:shrc^$(SZ_SUFFIX) reg1, reg2 is op_format=0x3b; reg2 & reg1; subopcode3=0xd {
  todo_binop(reg1:$(SZ_BYTES), reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x0000003b, 0x0000003f, OP3B, OOPS, T(sz), REG1, REG2 },
#
#	{ 0x0000003c, 0x000f003f, OP3B, N("add"), T(sz), REG3, REG1, REG2 },
:add^$(SZ_SUFFIX) reg3, reg1, reg2 is op_format=0x3c; reg2 & reg1; subopcode3=0x0 & reg3 {
  add(reg3:$(SZ_BYTES), reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x0001003c, 0x000f003f, OP3B, N("adc"), T(sz), REG3, REG1, REG2 },
:adc^$(SZ_SUFFIX) reg3, reg1, reg2 is op_format=0x3c; reg2 & reg1; subopcode3=0x1 & reg3 {
  adc(reg3:$(SZ_BYTES), reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x0002003c, 0x000f003f, OP3B, N("sub"), T(sz), REG3, REG1, REG2 },
:sub^$(SZ_SUFFIX) reg3, reg1, reg2 is op_format=0x3c; reg2 & reg1; subopcode3=0x2 & reg3 {
  sub(reg3:$(SZ_BYTES), reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x0003003c, 0x000f003f, OP3B, N("sbb"), T(sz), REG3, REG1, REG2 },
:sbb^$(SZ_SUFFIX) reg3, reg1, reg2 is op_format=0x3c; reg2 & reg1; subopcode3=0x3 & reg3 {
  todo_binop(reg3:$(SZ_BYTES), reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x0004003c, 0x000f003f, OP3B, N("shl"), T(sz), REG3, REG1, REG2 },
:shl^$(SZ_SUFFIX) reg3, reg1, reg2 is op_format=0x3c; reg2 & reg1; subopcode3=0x4 & reg3 {
  shl32(reg3:$(SZ_BYTES), reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x0005003c, 0x000f003f, OP3B, N("shr"), T(sz), REG3, REG1, REG2 },
:shr^$(SZ_SUFFIX) reg3, reg1, reg2 is op_format=0x3c; reg2 & reg1; subopcode3=0x5 & reg3 {
  # TODO: fix mask
  shr32(reg3:$(SZ_BYTES), reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x0007003c, 0x000f003f, OP3B, N("sar"), T(sz), REG3, REG1, REG2 },
:sar^$(SZ_SUFFIX) reg3, reg1, reg2 is op_format=0x3c; reg2 & reg1; subopcode3=0x7 & reg3 {
  # TODO: fix mask
  sar32(reg3:$(SZ_BYTES), reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x0008003c, 0x000f003f, OP3B, N("ld"), T(sz), REG3, T(datarr) },
:ld^$(SZ_SUFFIX) reg3, "D"^[reg1 + reg2*$(SZ_BYTES)] is op_format=0x3c; reg1 & reg2 ; subopcode3=0x8 & reg3 {
@if SZ_BITS == "32"
  load32
@elif SZ_BITS == "16"
  load16
@elif SZ_BITS == "8"
  load8
@endif
    (reg3:$(SZ_BYTES), reg1 + reg2*$(SZ_BYTES));
}

@if defined(SUPPORT_FUC5P)
#	{ 0x0009003c, 0x000f003f, OP3B, N("st"), T(sz), T(datarralt), REG2, .fmask = F_FUC5P },
:st^$(SZ_SUFFIX) "D"^[reg1 + reg3*$(SZ_BYTES)], reg2 is op_format=0x3c; reg1 & reg2 ; subopcode3=0x9 & reg3 {
@if SZ_BITS == "32"
  store32
@elif SZ_BITS == "16"
  store16
@elif SZ_BITS == "8"
  store8
@endif
    (reg1 + reg3*$(SZ_BYTES), reg2);
}
@endif

#	{ 0x000c003c, 0x000f003f, OP3B, N("shlc"), T(sz), REG3, REG1, REG2 },
:shlc^$(SZ_SUFFIX) reg3, reg1, reg2 is op_format=0x3c; reg2 & reg1; subopcode3=0xc & reg3 {
  todo_binop(reg3:$(SZ_BYTES), reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x000d003c, 0x000f003f, OP3B, N("shrc"), T(sz), REG3, REG1, REG2 },
:shrc^$(SZ_SUFFIX) reg3, reg1, reg2 is op_format=0x3c; reg2 & reg1; subopcode3=0xd & reg3 {
  todo_binop(reg3:$(SZ_BYTES), reg1:$(SZ_BYTES), reg2:$(SZ_BYTES));
}

#	{ 0x0000003c, 0x0000003f, OP3B, OOPS, T(sz), REG3, REG1, REG2 },
#	
#	{ 0x0000003d, 0x00000f3f, OP2B, N("not"), T(sz), REG1 },
:not^$(SZ_SUFFIX) reg1 is op_format=0x3d; subopcode2=0x0 & reg1 {
  not(reg1:$(SZ_BYTES), reg1:$(SZ_BYTES));
}

#	{ 0x0000013d, 0x00000f3f, OP2B, N("neg"), T(sz), REG1 },
:neg^$(SZ_SUFFIX) reg1 is op_format=0x3d; subopcode2=0x1 & reg1 {
  neg(reg1:$(SZ_BYTES), reg1:$(SZ_BYTES));
}

#	{ 0x0000023d, 0x00000f3f, OP2B, N("movf"), T(sz), REG1, .fmask = F_FUC0 },
#	{ 0x0000023d, 0x00000f3f, OP2B, N("mov"), T(sz), REG1, .fmask = F_FUC3P },

@endif # !ONCE
@ifdef ONCE

#	{ 0x0000033d, 0x00000f3f, OP2B, N("hswap"), T(sz), REG1 },
:hswap_b32 reg1 is op_format=0x3D & op_size=2; subopcode2=0x3 & reg1  {
  local tmp = (reg1 & 0xFFFF0000) >> 16;
  tmp = tmp | ((reg1 & 0xFFFF) << 16);
  reg1 = tmp;

  setResultFlags(reg1);
  $(O_flag) = 0;
}
:hswap_b16 reg1 is op_format=0x3D & op_size=1; subopcode2=0x3 & reg1  {
  local tmp = reg1 & 0xFFFF0000;
  tmp = tmp | ((reg1 & 0xFF) << 8);
  tmp = tmp | ((reg1 & 0xFF00) >> 8);
  reg1 = tmp;
  setResultFlags(reg1:2);
  $(O_flag) = 0;

  # TODO: probably should replace with this, but 32-bit endian swap
  # (hswap_b16, hswap_b32, hswap_b16) looks better with the above.
  #hswap16(reg1:2, reg1:2);
}
:hswap_b8 reg1 is op_format=0x3D & op_size=0; subopcode2=0x3 & reg1  {
  hswap8(reg1:1, reg1:1);
}

@endif
@ifndef ONCE

# { 0x0000043d, 0x00000f3f, OP2B, N("clear"), T(sz), REG1 },
:clear^$(SZ_SUFFIX) reg1 is op_format=0x3D ; subopcode2=0x4 & reg1  {
  clear(reg1 :$(SZ_BYTES));
}

#	{ 0x0000053d, 0x00000f3f, OP2B, N("setf"), T(sz), REG1, .fmask = F_FUC3P },
:setf^$(SZ_SUFFIX) reg1 is op_format=0x3D ; subopcode2=0x5 & reg1  {
  setResultFlags(reg1 :$(SZ_BYTES));
  $(O_flag) = 0;
}

#	{ 0x0000003d, 0x0000003f, OP2B, OOPS, T(sz), REG1 },
#

@endif # !ONCE
@ifdef ONCE
#	{ 0x0000003e, 0x000000ff, OP4B, N("lbra"), LLBTARG, .fmask = F_FUC4P },
:lbra fimm24st is raw_opcode = 0x3E; fimm24st { # signed?
  goto fimm24st;
} 

#	{ 0x0000007e, 0x000000ff, OP4B, N("lcall"), LLCTARG, .fmask = F_FUC4P },
:lcall fimm24st is raw_opcode = 0x7E; fimm24st {
  push32(&:4 inst_next);
  call fimm24st;
} 

#	{ 0x000000be, 0x000000ff, OP4B, OOPS, FIMM24, .fmask = F_FUC4P },
#

@endif
@ifndef ONCE

@if defined(SUPPORT_FUC5P)
#	{ 0x0000003f, 0x0000003f, OP2B, N("ld"), T(sz), REG2, DATAR, .fmask = F_FUC5P },
:ld^$(SZ_SUFFIX) reg2, "D"^[reg1] is op_format=0x3F; reg2 & reg1  {
@if SZ_BITS == "32"
  load32
@elif SZ_BITS == "16"
  load16
@elif SZ_BITS == "8"
  load8
@endif
    (reg2:$(SZ_BYTES), reg1);
}
@endif

#
#	{ 0, 0, OOPS, T(sz) },
#};
@endif # !ONCE
