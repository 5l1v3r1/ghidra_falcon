define pcodeop exit;

# 0xCX start
:mulu reg2, reg1, imm8 is raw_opcode=0xc0; reg2 & reg1; imm8 {
  # TODO
}

:muls reg2, reg1, imm8s is raw_opcode=0xc1; reg2 & reg1; imm8s {
  # TODO
}

:sext reg2, reg1, imm8 is raw_opcode=0xc2; reg2 & reg1; imm8 {
  # TODO
}

:and reg2, reg1, imm8 is raw_opcode=0xc4; reg2 & reg1; imm8 {
  # TODO
}

:or reg2, reg1, imm8 is raw_opcode=0xc5; reg2 & reg1; imm8 {
  # TODO
}

:xor reg2, reg1, imm8 is raw_opcode=0xc6; reg2 & reg1; imm8 {
  # TODO
}

:xbit reg2, reg1, imm8 is raw_opcode=0xc8; reg2 & reg1; imm8 {
  # TODO
}

# TODO: CE?

:iord reg2, [reg1^"+"^offset] is raw_opcode=0xcf; reg2 & reg1; imm8 [ offset=imm8 * 4; ] {
  # TODO
}

# 0xCX end

# 0xEX start
:mulu reg2, reg1, imm16 is raw_opcode=0xe0; reg2 & reg1; imm16 {
  # TODO
}

:muls reg2, reg1, imm16s is raw_opcode=0xe1; reg2 & reg1; imm16s {
  # TODO
}

:and reg2, reg1, imm16 is raw_opcode=0xe4; reg2 & reg1; imm16 {
  # TODO
}

:or reg2, reg1, imm16 is raw_opcode=0xe5; reg2 & reg1; imm16 {
  # TODO
}

:xor reg2, reg1, imm16 is raw_opcode=0xe6; reg2 & reg1; imm16 {
  # TODO
}
# 0xEX end


# 0xF0 start
:mulu reg1, imm8 is raw_opcode=0xf0; subopcode2=0x0 & reg1; imm8  {
  # TODO
}

:muls reg1, imm8s is raw_opcode=0xf0; subopcode2=0x1 & reg1; imm8s {
  # TODO
}

:sext reg1, imm8 is raw_opcode=0xf0; subopcode2=0x2 & reg1; imm8 {
  # TODO
}

# TODO: sethi

:and reg1, imm8 is raw_opcode=0xf0; subopcode2=0x4 & reg1; imm8 {
  # TODO
}

:or reg1, imm8 is raw_opcode=0xf0; subopcode2=0x5 & reg1; imm8 {
  # TODO
}

:xor reg1, imm8 is raw_opcode=0xf0; subopcode2=0x6 & reg1; imm8 {
  # TODO
}

:bset reg1, imm8 is raw_opcode=0xf0; subopcode2=0x9 & reg1; imm8 {
  # TODO
}

:bclr reg1, imm8 is raw_opcode=0xf0; subopcode2=0xa & reg1; imm8 {
  # TODO
}

:btgl reg1, imm8 is raw_opcode=0xf0; subopcode2=0xb & reg1; imm8 {
  # TODO
}

#TODO: xbit

# 0xF0 end

# 0xF1 start
:mulu reg1, imm16 is raw_opcode=0xf1; subopcode2=0x0 & reg1; imm16  {
  # TODO
}

:muls reg1, imm16s is raw_opcode=0xf1; subopcode2=0x1 & reg1; imm16s {
  # TODO
}

:and reg1, imm16 is raw_opcode=0xf1; subopcode2=0x4 & reg1; imm16 {
  # TODO
}

:or reg1, imm16 is raw_opcode=0xf1; subopcode2=0x5 & reg1; imm16 {
  # TODO
}

:xor reg1, imm16 is raw_opcode=0xf1; subopcode2=0x6 & reg1; imm16 {
  # TODO
}
# 0xF1 end

:call fimm16 is raw_opcode=0xf3; fimm16 {
    # TODO
}

# TODO: setp (0x8f2)

:exit is raw_opcode=0xf8; subopcode2=0x02 {
  exit();
}
